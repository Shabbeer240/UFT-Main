/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘UFTAPITest.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using Microsoft.Win32;
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Shared.Utilities;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Ext.LoadRunnerRTAddin;
    using HP.ST.Fwk.JVMLoader;
    
    
    
    public partial class LRWorkFlowScript : LRWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
        TestEntities _flow = null;
    	LoadRunner.LrApi lr;
    
    	
    	public BindDirection bind_dir45 = null;
        public BindDirection bind_dir46 = null;
        public HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor LoadRunnerDataCursor13 = null;
        public BindDirection bind_dir47 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy LoadRunnerDataCursor13_Policy = null;
        public BindDirection bind_dir48 = null;
        public BindDirection bind_dir49 = null;
        public BindDirection bind_dir50 = null;
        
        public LRWorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test", VuserClass.executionUnitInput)
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	this._context.SnapshotManager.EnableSnapshots = false;
        	this._context.PropertyBag["IsRunningInLodeMode"] = true;
        	_userCode = new TestUserCode();
            _flow = _userCode;
        	LoadInput();
        	this.Activities.Clear();
        	_flow.DataFetchActivity9 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity9");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity11 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity11");
            _flow.DataExporterCloseActivity12 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity12");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity10 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity10");
            this.LoadRunnerDataCursor13 = new HP.ST.Ext.LoadRunnerRTAddin.LoadRunnerDataCursor(_context,"LoadRunnerDataCursor13");
            this.LoadRunnerDataCursor13_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence8 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence8");
            _flow.StServiceCallActivity7 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity7");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.StServiceCallActivity6 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity6");
            _flow.DataFetchActivity9.Comment = @"";
            _flow.DataFetchActivity9.IconPath = @"";
            _flow.DataFetchActivity9.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.DataFetchActivity9.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity9.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity9_QueryParameters_Document = new XmlDocument();
            DataFetchActivity9_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity9Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>2004fd3a-5e20-4512-a85f-48a8c505d66d</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>City_Name</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>from_city,String,|to_city,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>London|Paris</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity9_QueryParameters_Document.LoadXml(xmlDataFetchActivity9Params);
            _flow.DataFetchActivity9.QueryParameters = DataFetchActivity9_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("City_Name", _flow.DataFetchActivity9);
            this.Activities.Add (_flow.DataFetchActivity9);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Loop2.Activities.Add (this.LoadRunnerDataCursor13);
            _flow.Loop2.Activities.Add (_flow.Sequence8);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity11.Comment = @"";
            _flow.DataExporterActivity11.IconPath = @"";
            _flow.DataExporterActivity11.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi89 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter45 = new VTDObjectGetter(pi89);
            VTDPropertyInfoBase pi90 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter45 = new VTDObjectSetter(pi90);
            binding_setter45 = new StringFormaterDecorator(binding_setter45,"{Step.DataFetchActivity9.OutTable}");
            bind_dir45 = new BindDirection(_flow.DataFetchActivity9,binding_getter45,binding_setter45,BindTargetType.ToInProperty);
            _flow.DataExporterActivity11.InDirections.Add(bind_dir45);
            this.Activities.Add (_flow.DataExporterActivity11);
            _flow.DataExporterCloseActivity12.Comment = @"";
            _flow.DataExporterCloseActivity12.IconPath = @"";
            _flow.DataExporterCloseActivity12.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.DataExporterCloseActivity12);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            _flow.EndActivity3.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity10.Comment = @"";
            _flow.DataDisconnectActivity10.IconPath = @"";
            _flow.DataDisconnectActivity10.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi91 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter46 = new VTDObjectGetter(pi91);
            VTDPropertyInfoBase pi92 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter46 = new VTDObjectSetter(pi92);
            binding_setter46 = new StringFormaterDecorator(binding_setter46,"{Step.DataFetchActivity9.OutTable}");
            bind_dir46 = new BindDirection(_flow.DataFetchActivity9,binding_getter46,binding_setter46,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity10.InDirections.Add(bind_dir46);
            this.Activities.Add (_flow.DataDisconnectActivity10);
            this.LoadRunnerDataCursor13.Comment = @"";
            this.LoadRunnerDataCursor13.IconPath = @"";
            this.LoadRunnerDataCursor13.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi93 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter47 = new VTDObjectGetter(pi93);
            VTDPropertyInfoBase pi94 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter47 = new VTDObjectSetter(pi94);
            binding_setter47 = new StringFormaterDecorator(binding_setter47,"{Step.DataFetchActivity9.OutTable}");
            bind_dir47 = new BindDirection(_flow.DataFetchActivity9,binding_getter47,binding_setter47,BindTargetType.ToInProperty);
            this.LoadRunnerDataCursor13.InDirections.Add(bind_dir47);
            this.LoadRunnerDataCursor13_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.LoadRunnerDataCursor13_Policy.StartAtSpecificRow = 1;
            this.LoadRunnerDataCursor13_Policy.StartCondition.ColumnName = "";
            this.LoadRunnerDataCursor13_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.LoadRunnerDataCursor13_Policy.StartCondition.Value = "";
            this.LoadRunnerDataCursor13_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.LoadRunnerDataCursor13_Policy.EndAtSpecificRow = 1;
            this.LoadRunnerDataCursor13_Policy.EndCondition.ColumnName = "";
            this.LoadRunnerDataCursor13_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.LoadRunnerDataCursor13_Policy.EndCondition.Value = "";
            this.LoadRunnerDataCursor13_Policy.StepType = CursorStepType.Forward;
            this.LoadRunnerDataCursor13_Policy.StepSize = 1;
            this.LoadRunnerDataCursor13_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.LoadRunnerDataCursor13.Policy = this.LoadRunnerDataCursor13_Policy;
            this.LoadRunnerDataCursor13.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.LoadRunnerDataCursor13.ResetCursor;
            _flow.Sequence8.Comment = @"";
            _flow.Sequence8.IconPath = @"";
            _flow.Sequence8.Name = @"Sequence8";
            _flow.Sequence8.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Sequence8.Activities.Add (_flow.StServiceCallActivity7);
            _flow.Sequence8.Activities.Add (_flow.StServiceCallActivity5);
            _flow.Sequence8.Activities.Add (_flow.StServiceCallActivity6);
            XmlDocument StServiceCallActivity7_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity7_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity7_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>{DataSource.City_Name.from_city}</DepartureCity><ArrivalCity>{DataSource.City_Name.to_city}</ArrivalCity></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity7.InputEnvelope = StServiceCallActivity7_InputEnvelope_Document;
            _flow.StServiceCallActivity7.Comment = @"";
            _flow.StServiceCallActivity7.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity7.Name = @"GetFlights";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity7.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity7.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity7.Service = @"Flights_Service";
            _flow.StServiceCallActivity7.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity7.Operation = @"GetFlights";
            _flow.StServiceCallActivity7.IsOneWay = false;
            _flow.StServiceCallActivity7.SendRequestToService=true;
            _flow.StServiceCallActivity7.FaultExpected=false;
            _flow.StServiceCallActivity7.IsAsync=false;
            _flow.StServiceCallActivity7.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity7.ListenOnPort = (int)0;
            _flow.StServiceCallActivity7.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity7.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity7.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi95 = new VTDPropertyInfoBase("from_city");
            VTDBaseGetter binding_getter48 = new VTDObjectGetter(pi95);
            VTDPropertyInfoBase pi96 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter48 = new VTDXPathSetter(pi96,XmlTypeCode.String);
            binding_setter48 = new StringFormaterDecorator(binding_setter48,"{DataSource.City_Name.from_city}");
            bind_dir48 = new BindDirection(this.LoadRunnerDataCursor13,binding_getter48,binding_setter48,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir48);
            VTDPropertyInfoBase pi97 = new VTDPropertyInfoBase("to_city");
            VTDBaseGetter binding_getter49 = new VTDObjectGetter(pi97);
            VTDPropertyInfoBase pi98 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter49 = new VTDXPathSetter(pi98,XmlTypeCode.String);
            binding_setter49 = new StringFormaterDecorator(binding_setter49,"{DataSource.City_Name.to_city}");
            bind_dir49 = new BindDirection(this.LoadRunnerDataCursor13,binding_getter49,binding_setter49,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity7.InDirections.Add(bind_dir49);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><OrderNumber>88</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"Flights_Service";
            _flow.StServiceCallActivity5.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity5.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            _flow.StServiceCallActivity5.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity5.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity5.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            XmlDocument StServiceCallActivity6_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity6_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity6_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><DeleteFlightOrder xmlns=""HP.SOAQ.SampleApp""><OrderNumber>{Step.InputProperties.StServiceCallActivity5.Body.GetFlightOrders.FlightsDetails.OrderNumber}</OrderNumber></DeleteFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity6.InputEnvelope = StServiceCallActivity6_InputEnvelope_Document;
            _flow.StServiceCallActivity6.Comment = @"";
            _flow.StServiceCallActivity6.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity6.Name = @"DeleteFlightOrder";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/DeleteFlightOrder";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity6.Service = @"Flights_Service";
            _flow.StServiceCallActivity6.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity6.Operation = @"DeleteFlightOrder";
            _flow.StServiceCallActivity6.IsOneWay = false;
            _flow.StServiceCallActivity6.SendRequestToService=true;
            _flow.StServiceCallActivity6.FaultExpected=false;
            _flow.StServiceCallActivity6.IsAsync=false;
            _flow.StServiceCallActivity6.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity6.ListenOnPort = (int)0;
            _flow.StServiceCallActivity6.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity6.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity6.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi99 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter50 = new VTDXPathGetter(pi99,XmlTypeCode.Int);
            VTDPropertyInfoBase pi100 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='DeleteFlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter50 = new VTDXPathSetter(pi100,XmlTypeCode.Int);
            bind_dir50 = new BindDirection(_flow.StServiceCallActivity5,binding_getter50,binding_setter50,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir50);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	public LoadRunner.LrApi LrApi
    	{
    		set { this.lr = value; }
    	}
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
            this.ExecuteStep();
            WorkFlowScript_Completed();
        }
        
    
        void Workflow_Executing()
        {	        
        }
        
        void WorkFlowScript_Completed()
        {
          	OnExecutionCompleted();
        }
                    
        void TransactionStart(object sender, EventArgs args)
        {
          	STActivityBase activity = sender as STActivityBase;
          	lr.start_transaction(activity.Name);
        }
            
        void TransactionEnd(object sender, EventArgs args)
        {
           	STActivityBase activity = sender as STActivityBase;
           	lr.end_transaction(activity.Name, lr.PASS);
        }
    
        private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
           	
        }
    
    }
    
    public partial class VuserClass
    {
    	STRunTimeContext ctx;
        LRWorkFlowScript script;
    
        public int Action()
        {
    		
    		try
    		{
    			
                script.LrApi = lr;
                script.InitializeComponent();
                script.Start();
            }
            catch (Exception)
            {
    			// todo: log the error message
            }
            
            return 0;
        }
        
        private void SendLogToVugen(string logText)
    	{
    		lr.log_message(logText);
    	}
    }
    
    }
    